@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'breakpoint' as *;
@use '../variables' as var;
@use '../maps' as maps;
@use '../vendor/rfs' as *;

// ---------- Grid system ----------
//
// Generate semantic grid columns with these mixins.
@mixin make-row($gutter: var.$grid-gutter-width) {
    --#{var.$prefix}gutter-x: #{$gutter};
    --#{var.$prefix}gutter-y: 0;
    display: flex;
    flex-wrap: wrap;
    // TODO: Revisit calc order after https://github.com/react-bootstrap/react-bootstrap/issues/6039 is fixed
    margin-top: calc(-1 * var(--#{var.$prefix}gutter-y));
    margin-right: calc(-0.5 * var(--#{var.$prefix}gutter-x));
    margin-left: calc(-0.5 * var(--#{var.$prefix}gutter-x));
}

@mixin make-col-ready() {
    // Add box sizing if only the grid is loaded
    box-sizing: if(
        meta.variable-exists(include-column-box-sizing) and var.$include-column-box-sizing,
        border-box,
        null
    );
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we set the width
    // later on to override this initial width.
    flex-shrink: 0;
    width: 100%;
    max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
    padding-right: calc(var(--#{var.$prefix}gutter-x) * 0.5);
    padding-left: calc(var(--#{var.$prefix}gutter-x) * 0.5);
    margin-top: var(--#{var.$prefix}gutter-y);
}

@mixin make-col($size: false, $columns: var.$grid-columns) {
    @if $size {
        flex: 0 0 auto;
        width: math.percentage(divide($size, $columns));
    } @else {
        flex: 1 1 0;
        max-width: 100%;
    }
}

@mixin make-col-auto() {
    flex: 0 0 auto;
    width: auto;
}

@mixin make-col-offset($size, $columns: var.$grid-columns) {
    $num: divide($size, $columns);
    margin-left: if($num == 0, 0, math.percentage($num));
}

// ---------- Row columns ----------
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// number of columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
    > * {
        flex: 0 0 auto;
        width: math.percentage(divide(1, $count));
    }
}

// ---------- Framework grid generation ----------
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.
@mixin make-grid-columns(
    $columns: var.$grid-columns,
    $gutter: var.$grid-gutter-width,
    $breakpoints: var.$grid-breakpoints
) {
    @each $breakpoint in map.keys($breakpoints) {
        // $infix: breakpoint-infix($breakpoint, $breakpoints);
        $prefix: breakpoint-prefix($breakpoint, $breakpoints);

        @include media-breakpoint-up($breakpoint, $breakpoints) {
            // Provide basic `.col-{bp}` classes for equal-width flexbox columns
            .#{$prefix}col {
                flex: 1 0 0;
            }

            .#{$prefix}row-cols-auto > * {
                @include make-col-auto();
            }

            @if var.$grid-row-columns > 0 {
                @for $i from 1 through var.$grid-row-columns {
                    .#{$prefix}row-cols-#{$i} {
                        @include row-cols($i);
                    }
                }
            }

            .#{$prefix}col-auto {
                @include make-col-auto();
            }

            @if $columns > 0 {
                @for $i from 1 through $columns {
                    .#{$prefix}col-#{$i} {
                        @include make-col($i, $columns);
                    }
                }

                // `$columns - 1` because offsetting by the width of an entire row isn't possible
                @for $i from 0 through ($columns - 1) {
                    @if not($prefix == '' and $i == 0) {
                        // Avoid emitting useless .offset-0
                        .#{$prefix}offset-#{$i} {
                            @include make-col-offset($i, $columns);
                        }
                    }
                }
            }

            // Gutters
            //
            // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
            @each $key, $value in maps.$gutters {
                .#{$prefix}g-#{$key},
                .#{$prefix}gx-#{$key} {
                    --#{var.$prefix}gutter-x: #{$value};
                }

                .#{$prefix}g-#{$key},
                .#{$prefix}gy-#{$key} {
                    --#{var.$prefix}gutter-y: #{$value};
                }
            }
        }
    }
}

@mixin make-cssgrid($rows: var.$cssgrid-rows, $columns: var.$grid-columns, $breakpoints: var.$grid-breakpoints) {
    @each $breakpoint in map.keys($breakpoints) {
        // $infix: breakpoint-infix($breakpoint, $breakpoints);
        $prefix: breakpoint-prefix($breakpoint, $breakpoints);

        @include media-breakpoint-up($breakpoint, $breakpoints) {
            @if $rows > 0 {
                @for $i from 1 through $rows {
                    .#{$prefix}g-row-#{$i} {
                        grid-row: span $i / span $i;
                    }
                }

                @for $i from 2 through $rows {
                    .#{$prefix}g-rs-#{$i} {
                        grid-row-start: $i;
                    }
                    .#{$prefix}g-re-#{$i} {
                        grid-row-end: $i;
                    }
                }
            }

            @if $columns > 0 {
                @for $i from 1 through $columns {
                    .#{$prefix}g-col-#{$i} {
                        grid-column: auto / span $i;
                    }
                }

                // Start with `1` because `0` is an invalid value.
                // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
                @for $i from 1 through ($columns - 1) {
                    .#{$prefix}g-cs-#{$i} {
                        grid-column-start: $i;
                    }
                }
            }
        }
    }
}
